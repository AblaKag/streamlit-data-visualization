import streamlit as st
import pandas as pd
import numpy as np
import cufflinks as cf
import seaborn as sns
import plotly.express as px
import gzip
import matplotlib.pyplot as plt


# Function to load a gzipped CSV file
def load_data():
    with gzip.open('cleaned_data.csv.gz', 'rt', encoding='utf-8') as f:
        df = pd.read_csv(f)
    return df

# Load the cleaned dataset
df = load_data()

# Streamlit app setup
st.set_page_config(page_title="Data Analysis App", page_icon="üìä", layout="wide")
st.title('Data Analysis App')

# Sidebar for navigation
st.sidebar.title("Navigation")
page = st.sidebar.radio("Choose a page", ("Description du jeu de donn√©es", "Statistiques descriptives", "Visualisations", "Wordcloud"))


if page == "Description du jeu de donn√©es":
    # Page 1: Description du jeu de donn√©es

    st.header('1. Description du jeu de donn√©es')

    # Origin of the data
    st.subheader('Origine des donn√©es')
    st.write("""
    Ces donn√©es repr√©sentent toutes les collections des biblioth√®ques de pr√™t, telles qu'elles √©taient le 27 juillet 2018. Elles contiennent des informations sur les livres disponibles dans 
    ces biblioth√®ques, telles que le titre, l'auteur, le nombre de pr√™ts, etc.
    """)

    # Number of observations and variables
    st.subheader('Nombre d\'observations et de variables')
    st.write(f"Le jeu de donn√©es contient {df.shape[0]} observations et {df.shape[1]} variables.")

    # Types of variables
    st.subheader('Types de variables')
    st.write(df.dtypes)

    # Meaning of each variable
    st.subheader('Signification de chaque variable')
    st.write("""
    - **Langue** : La langue du livre.
    - **Titre** : Le titre du livre.
    - **Editeur** : L'√©diteur du livre.
    - **Date** : La date de publication du livre.
    - **Format** : Le format du livre (papier, num√©rique, etc.).
    - **Auteur Nom** : Le nom de l'auteur.
    - **Auteur Pr√©nom** : Le pr√©nom de l'auteur.
    - **Type de document** : Le type de document (par exemple, livre, article, etc.).
    - **Nombre de localisations** : Le nombre de biblioth√®ques o√π le livre est disponible.
    - **Nombre de pr√™t total** : Le nombre total de fois que le livre a √©t√© emprunt√©.
    - **Nombre de pr√™ts 2017** : Le nombre de pr√™ts en 2017.
    - **Nombre d'exemplaires** : Le nombre d'exemplaires du livre dans les biblioth√®ques.
    - **Cat√©gorie statistique 1** : Une cat√©gorie suppl√©mentaire pour le livre.
    - **Anciennet√© de publication** : L'√¢ge du livre en ann√©es depuis sa publication.
    - **Taux de pr√™t moyen** : Le taux moyen de pr√™t par exemplaire.
    """)

    # Missing values per variable
    st.subheader('Nombre de valeurs manquantes par variable')
    missing_values = df.isnull().sum()
    st.write(missing_values)

elif page == "Statistiques descriptives":
    # Page 2: Statistiques descriptives

    st.header('2. Statistiques descriptives')

    # Show summary statistics for numerical columns
    st.subheader('Statistiques descriptives pour les variables num√©riques')
    st.write(df.describe())

    # Show value counts for categorical columns
    st.subheader('Comptage des valeurs pour les variables cat√©gorielles')
    categorical_columns = df.select_dtypes(include=['object']).columns
    for col in categorical_columns:
        st.write(f"**{col}**:")
        st.write(df[col].value_counts())

    # Show missing values
    st.subheader('Valeurs manquantes')
    st.write(df.isnull().sum())

elif page == "Visualisations":
    # Page 3: Visualisations

    st.header('3. Visualisations')

     # S√©lecteur de langue
    langue_selectionnee = st.selectbox('S√©lectionner une langue', df['Langue'].unique())

     # Filtrer les donn√©es en fonction de la langue choisie
    df_filtr√© = df[df['Langue'] == langue_selectionnee]
    st.write(df_filtr√©)

    
