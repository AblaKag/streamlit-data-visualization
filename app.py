import streamlit as st
import pandas as pd
import numpy as np
import cufflinks as cf
import seaborn as sns
import plotly.express as px
import gzip
import matplotlib.pyplot as plt


# Function to load a gzipped CSV file
def load_data():
    with gzip.open('cleaned_data.csv.gz', 'rt', encoding='utf-8') as f:
        df = pd.read_csv(f)
    return df

# Load the cleaned dataset
df = load_data()

# Streamlit app setup
st.set_page_config(page_title="Data Analysis App", page_icon="ðŸ“Š", layout="wide")
st.title('Data Analysis App')

# Sidebar for navigation
st.sidebar.title("Navigation")
page = st.sidebar.radio("Choose a page", ("Description du jeu de donnÃ©es", "Statistiques descriptives", "Visualisations", "Wordcloud"))


if page == "Description du jeu de donnÃ©es":
    # Page 1: Description du jeu de donnÃ©es

    st.header('1. Description du jeu de donnÃ©es')

    # Origin of the data
    st.subheader('Origine des donnÃ©es')
    st.write("""
    Ces donnÃ©es reprÃ©sentent toutes les collections des bibliothÃ¨ques de prÃªt, telles qu'elles Ã©taient le 27 juillet 2018. Elles contiennent des informations sur les livres disponibles dans 
    ces bibliothÃ¨ques, telles que le titre, l'auteur, le nombre de prÃªts, etc.
    """)

    # Number of observations and variables
    st.subheader('Nombre d\'observations et de variables')
    st.write(f"Le jeu de donnÃ©es contient {df.shape[0]} observations et {df.shape[1]} variables.")

    # Types of variables
    st.subheader('Types de variables')
    st.write(df.dtypes)

    # Meaning of each variable
    st.subheader('Signification de chaque variable')
    st.write("""
    - **Langue** : La langue du livre.
    - **Titre** : Le titre du livre.
    - **Editeur** : L'Ã©diteur du livre.
    - **Date** : La date de publication du livre.
    - **Format** : Le format du livre (papier, numÃ©rique, etc.).
    - **Auteur Nom** : Le nom de l'auteur.
    - **Auteur PrÃ©nom** : Le prÃ©nom de l'auteur.
    - **Type de document** : Le type de document (par exemple, livre, article, etc.).
    - **Nombre de localisations** : Le nombre de bibliothÃ¨ques oÃ¹ le livre est disponible.
    - **Nombre de prÃªt total** : Le nombre total de fois que le livre a Ã©tÃ© empruntÃ©.
    - **Nombre de prÃªts 2017** : Le nombre de prÃªts en 2017.
    - **Nombre d'exemplaires** : Le nombre d'exemplaires du livre dans les bibliothÃ¨ques.
    - **CatÃ©gorie statistique 1** : Une catÃ©gorie supplÃ©mentaire pour le livre.
    - **AnciennetÃ© de publication** : L'Ã¢ge du livre en annÃ©es depuis sa publication.
    - **Taux de prÃªt moyen** : Le taux moyen de prÃªt par exemplaire.
    """)

    # Missing values per variable
    st.subheader('Nombre de valeurs manquantes par variable')
    missing_values = df.isnull().sum()
    st.write(missing_values)

elif page == "Statistiques descriptives":
    # Page 2: Statistiques descriptives

    st.header('2. Statistiques descriptives')

    # Show summary statistics for numerical columns
    st.subheader('Statistiques descriptives pour les variables numÃ©riques')
    st.write(df.describe())

    # Show value counts for categorical columns
    st.subheader('Comptage des valeurs pour les variables catÃ©gorielles')
    categorical_columns = df.select_dtypes(include=['object']).columns
    for col in categorical_columns:
        st.write(f"**{col}**:")
        st.write(df[col].value_counts())

    # Show missing values
    st.subheader('Valeurs manquantes')
    st.write(df.isnull().sum())

elif page == "Visualisations":
    # Page 3: Visualisations

    st.header('3. Visualisations')

    # SÃ©lecteur de langue
    langue_selectionnee = st.selectbox('SÃ©lectionner une langue', df['Langue'].unique(), key="selectbox_langue6")

    # Filtrer les donnÃ©es en fonction de la langue choisie
    df_filtrÃ©3 = df[df['Langue'] == langue_selectionnee]
    st.write(df_filtrÃ©)


    # Slider pour filtrer les donnÃ©es selon le nombre de prÃªts total
    nombre_pret_min, nombre_pret_max = st.slider(
    'SÃ©lectionner une plage de nombre de prÃªts',
    min_value=int(df['Nombre de prÃªt total'].min()),
    max_value=int(df['Nombre de prÃªt total'].max()),
    value=(int(df['Nombre de prÃªt total'].min()), int(df['Nombre de prÃªt total'].max())))

    ### Graph interactif 1
    # Filtrer les donnÃ©es selon la plage sÃ©lectionnÃ©e
    df_filtrÃ© = df[(df['Nombre de prÃªt total'] >= nombre_pret_min) & (df['Nombre de prÃªt total'] <= nombre_pret_max)]
    st.write(df_filtrÃ©)
    
    langue_selectionnee = st.selectbox("Choisir une langue", df["Langue"].unique())
    df_filtrÃ© = df[df["Langue"] == langue_selectionnee]
    
    # CrÃ©er un graphique avec Plotly
    fig = px.bar(df_filtrÃ©, x="Date", y="Nombre de prÃªt total", title=f"Nombre de prÃªts pour {langue_selectionnee}")

    # Afficher le graphique dans Streamlit
    st.plotly_chart(fig)

    ### Graph interactif 2
    # Slider pour filtrer le nombre d'exemplaires
    nombre_exemplaires_min, nombre_exemplaires_max = st.slider(
    'SÃ©lectionner une plage de nombre d\'exemplaires',
    min_value=int(df['Nombre d\'exemplaires'].min()),
    max_value=int(df['Nombre d\'exemplaires'].max()),
    value=(int(df['Nombre d\'exemplaires'].min()), int(df['Nombre d\'exemplaires'].max())))

    # Filtrer les donnÃ©es selon la plage sÃ©lectionnÃ©e
    df_filtrÃ©_exemplaires = df[(df['Nombre d\'exemplaires'] >= nombre_exemplaires_min) & 
                            (df['Nombre d\'exemplaires'] <= nombre_exemplaires_max)]

    # CrÃ©er un graphique de type scatter pour voir la relation
    fig_exemplaires = px.scatter(df_filtrÃ©_exemplaires, 
                             x='Nombre de prÃªt total', 
                             y='Nombre d\'exemplaires',
                             title="Relation entre Nombre de prÃªts total et Nombre d'exemplaires")

    # Afficher le graphique
    st.plotly_chart(fig_exemplaires)

    ### Graph interactif 3
    # Filtrer les donnÃ©es selon le type de document
    type_document_selectionne = st.selectbox("Choisir un type de document", df["Type de document"].unique())

    # Filtrer les donnÃ©es
    df_filtrÃ©_document = df[df["Type de document"] == type_document_selectionne]

    # CrÃ©er un histogramme pour les prÃªts totaux par type de document
    fig_document = px.histogram(df_filtrÃ©_document, 
                             x='Nombre de prÃªt total', 
                             title=f"Histogramme des prÃªts totaux pour le type de document {type_document_selectionne}",
                             labels={'Nombre de prÃªt total': 'Nombre de prÃªts total'})

    # Afficher le graphique
    st.plotly_chart(fig_document)

    ### Graph interactif 4
    # SÃ©lectionner la langue via un filtre interactif
    langue_selectionnee_scatter = st.selectbox("Choisir une langue", df["Langue"].unique(), key="selectbox_langue")

    # Filtrer les donnÃ©es selon la langue choisie
    df_filtrÃ©_scatter = df[df["Langue"] == langue_selectionnee_scatter]

    # CrÃ©er un scatter plot pour Nombre de prÃªt total vs Nombre de localisations
    fig_scatter = px.scatter(df_filtrÃ©_scatter, 
                         x="Nombre de prÃªt total", 
                         y="Nombre de localisations", 
                         title=f"Relation entre Nombre de prÃªt total et Nombre de localisations pour {langue_selectionnee_scatter}",
                         labels={'Nombre de prÃªt total': 'Nombre de prÃªt total', 'Nombre de localisations': 'Nombre de localisations'})
    
    # Afficher le graphique
    st.plotly_chart(fig_scatter)

    ### Graph interactif 5
    # SÃ©lectionner la langue via un filtre interactif
    langue_selectionnee_anciennete = st.selectbox("Choisir une langue", df["Langue"].unique(), key="selectbox_langue1")

    # Filtrer les donnÃ©es selon la langue choisie
    df_filtrÃ©_anciennete = df[df["Langue"] == langue_selectionnee_anciennete]

    # CrÃ©er un histogramme pour l'anciennetÃ© de publication
    fig_anciennete = px.histogram(df_filtrÃ©_anciennete, 
                               x='AnciennetÃ© de publication', 
                               title=f"AnciennetÃ© de publication pour {langue_selectionnee_anciennete}",
                               labels={'AnciennetÃ© de publication': 'AnciennetÃ© de publication'})

    # Afficher le graphique
    st.plotly_chart(fig_anciennete)


