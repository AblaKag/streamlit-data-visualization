import streamlit as st
import pandas as pd
import numpy as np
import cufflinks as cf
import seaborn as sns
import plotly.express as px
import gzip
import matplotlib.pyplot as plt


# Function to load a gzipped CSV file
def load_data():
    with gzip.open('cleaned_data.csv.gz', 'rt', encoding='utf-8') as f:
        df = pd.read_csv(f)
    return df

# Load the cleaned dataset
df = load_data()

# Streamlit app setup
st.set_page_config(page_title="Data Analysis App", page_icon="üìä", layout="wide")
st.title('Data Analysis App')

# Sidebar for navigation
st.sidebar.title("Navigation")
page = st.sidebar.radio("Choose a page", ("Description du jeu de donn√©es", "Statistiques descriptives", "Visualisations", "Wordcloud"))


if page == "Description du jeu de donn√©es":
    # Page 1: Description du jeu de donn√©es

    st.header('1. Description du jeu de donn√©es')

    # Origin of the data
    st.subheader('Origine des donn√©es')
    st.write("""
    Ces donn√©es repr√©sentent toutes les collections des biblioth√®ques de pr√™t, telles qu'elles √©taient le 27 juillet 2018. Elles contiennent des informations sur les livres disponibles dans 
    ces biblioth√®ques, telles que le titre, l'auteur, le nombre de pr√™ts, etc.
    """)

    # Number of observations and variables
    st.subheader('Nombre d\'observations et de variables')
    st.write(f"Le jeu de donn√©es contient {df.shape[0]} observations et {df.shape[1]} variables.")

    # Types of variables
    st.subheader('Types de variables')
    st.write(df.dtypes)

    # Meaning of each variable
    st.subheader('Signification de chaque variable')
    st.write("""
    - **Langue** : La langue du livre.
    - **Titre** : Le titre du livre.
    - **Editeur** : L'√©diteur du livre.
    - **Date** : La date de publication du livre.
    - **Format** : Le format du livre (papier, num√©rique, etc.).
    - **Auteur Nom** : Le nom de l'auteur.
    - **Auteur Pr√©nom** : Le pr√©nom de l'auteur.
    - **Type de document** : Le type de document (par exemple, livre, article, etc.).
    - **Nombre de localisations** : Le nombre de biblioth√®ques o√π le livre est disponible.
    - **Nombre de pr√™t total** : Le nombre total de fois que le livre a √©t√© emprunt√©.
    - **Nombre de pr√™ts 2017** : Le nombre de pr√™ts en 2017.
    - **Nombre d'exemplaires** : Le nombre d'exemplaires du livre dans les biblioth√®ques.
    - **Cat√©gorie statistique 1** : Une cat√©gorie suppl√©mentaire pour le livre.
    - **Anciennet√© de publication** : L'√¢ge du livre en ann√©es depuis sa publication.
    - **Taux de pr√™t moyen** : Le taux moyen de pr√™t par exemplaire.
    """)

    # Missing values per variable
    st.subheader('Nombre de valeurs manquantes par variable')
    missing_values = df.isnull().sum()
    st.write(missing_values)

elif page == "Statistiques descriptives":
    # Page 2: Statistiques descriptives

    st.header('2. Statistiques descriptives')

    # Show summary statistics for numerical columns
    st.subheader('Statistiques descriptives pour les variables num√©riques')
    st.write(df.describe())

    # Show value counts for categorical columns
    st.subheader('Comptage des valeurs pour les variables cat√©gorielles')
    categorical_columns = df.select_dtypes(include=['object']).columns
    for col in categorical_columns:
        st.write(f"**{col}**:")
        st.write(df[col].value_counts())

    # Show missing values
    st.subheader('Valeurs manquantes')
    st.write(df.isnull().sum())

elif page == "Visualisations":
    # Page 3: Visualisations

    st.header('3. Visualisations')

    # 1. Histogram for numerical variables using Matplotlib
    st.subheader('Histogramme des variables num√©riques')
    numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns
    for col in numerical_columns:
        st.write(f"**{col}** Histogramme:")
        fig, ax = plt.subplots()
        ax.hist(df[col].dropna(), bins=30, color='skyblue', edgecolor='black')
        ax.set_title(f'Histogramme de {col}')
        ax.set_xlabel(col)
        ax.set_ylabel('Fr√©quence')
        st.pyplot(fig)

    # 2. Bar chart for categorical variables using Matplotlib
    st.subheader('Diagrammes en barres pour les variables cat√©gorielles')
    categorical_columns = df.select_dtypes(include=['object']).columns
    for col in categorical_columns:
        st.write(f"**{col}** Diagramme en barres:")
        fig = plt.figure(figsize=(8, 4))
        df[col].value_counts().plot(kind='bar', color='lightcoral')
        plt.title(f'Diagramme en barres de {col}')
        plt.xlabel(col)
        plt.ylabel('Fr√©quence')
        st.pyplot(fig)

    # 3. Correlation Heatmap using Seaborn
    st.subheader('Carte de chaleur des corr√©lations')
    correlation_matrix = df[numerical_columns].corr()
    fig, ax = plt.subplots(figsize=(10, 8))
    sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', ax=ax, cbar=True)
    ax.set_title('Carte de chaleur des corr√©lations')
    st.pyplot(fig)

    # 4. Bar chart for total loan count per year using Plotly
    st.subheader('Graphique interactif des pr√™ts totaux par ann√©e')
    # Ensure the 'Date' column is in datetime format
    df['Date'] = pd.to_datetime(df['Date'], errors='coerce')  # Convert to datetime if not already
    df['Year'] = df['Date'].dt.year  # Extract year
    fig = px.bar(df, x="Year", y="Nombre de pr√™t total", title="Pr√™ts totaux par ann√©e", labels={"Year": "Ann√©e", "Nombre de pr√™t total": "Total des pr√™ts"})
    st.plotly_chart(fig)

    # 5. Another Plotly Chart (Example: Total Loans by Book Title)
    st.subheader('Graphique interactif des pr√™ts totaux par titre de livre')
    book_loans = df.groupby('Titre')['Nombre de pr√™t total'].sum().reset_index()
    fig2 = px.bar(book_loans, x='Titre', y='Nombre de pr√™t total', title="Pr√™ts totaux par titre de livre", labels={'Titre': 'Titre du livre', 'Nombre de pr√™t total': 'Total des pr√™ts'})
    st.plotly_chart(fig2)

